# -*- coding: utf-8 -*-

import Tkinter
import time
import random


"""
Author: JTanon
Created on the 08/06/2013
"""

class Window(object):

	def __init__(self):
		self.root = Tkinter.Tk()
		
	def imAlive_ALIVE(): #TO TEST

		#Main window and widgets parameters
		self.eliza = Tkinter.Label(text = "Eliza", borderwidth = 10, font = "Arial 14")
		self.display = Tkinter.Text(font = "Times 10", state = Tkinter.DISABLED)
		self.user_entry = Tkinter.Entry()
		self.send_button = Tkinter.Button(text = "Envoyer")
		self.quit_button = Tkinter.Button(text = "Quitter Eliza", command = root.destroy)
	
		self.user_entry.config(width = 85) # user's entry
		self.display.config(width = 100, height = 15) # displays Eliza's answer
		
		#Placement of widgets
		self.eliza.grid()
		self.display.grid()
		self.user_entry.grid()
		self.send_button.grid(row = 6, column = 0, sticky = "s" + "e")
		self.quit_button.grid(row = 6, column = 0, sticky = "s" + "w")

	#Makes Eliza display a hello message when launched
	def sayHelloEliza(self):
		self.display.config(state = Tkinter.NORMAL)
		self.display.insert("0.0", "Bonjour, je suis Eliza. Que puis-je faire pour vous?")
		self.display.config(state = Tkinter.DISABLED)



	#speakToMe: Gets user input, Adds input to stack
	#Displays user's entry in main window while deleting it from user_entry window
	
	def speakToMe(self, event): 
		if event.keysym == "Return" or event.num == 1:
			self.display.config(state = Tkinter.NORMAL)
			entry = user_entry.get() #self???? TO TEST
			#stackWrite.push(str(entry.strip())) adds user's entry to stack
			self.display.insert(Tkinter.END, "\n"+user_entry.get()) #self??? TO TEST
			self.user_entry.delete(0, len(user_entry.get()))
			self.send_button.config(state = Tkinter.DISABLED)
			self.user_entry.config(state = Tkinter.DISABLED)
			self.display.config(state = Tkinter.DISABLED)

	
	# heresYourAnswer: Takes the final calculated answer from Eliza and displays it in Eliza's window
	
	def hereComesYourAnswer(self, answer):
		time.sleep(1.5) #reflexion illusion
		self.display.config(state = Tkinter.NORMAL)
		self.display.insert(Tkinter.END, "\n"+ str(answer))
		self.display.config(state = Tkinter.DISABLED)
		self.send_button.config(state = Tkinter.NORMAL)
		self.user_entry.config (state = Tkinter.NORMAL)

	
	#counts up to 100 - then calls areYouStillHere to make Eliza talk

	def itsTheFinalCountdown(): 	
	#Attention, prevoir une remise à zéro dés qu'on a une saisie clavier 
		count = 0
		while count != 100:
			time.sleep(1)
			count += 1
			if count == 100:
				timeout_talk()	

	
	
	#Makes Eliza speak after 100 secs of inactivity from the user

	def areYouStillHere(): 
    	lst = ["Ne voulez-vous pas m'en dire plus?" , "Etes-vous toujours là?" , "Si vous souhaitez de l'aide, il faut me parler!" , "Allons, dites-m'en encore un peu!"]
    	i = random.randint(0, len(lst) - 1)  
    	self.display.config(state = Tkinter.NORMAL)
		self.display.insert(Tkinter.END, "\n"+ lst[i])
		self.display.config(state = Tkinter.DISABLED)
    

    
    # byThen: NOT FULLY FUNCTIONNAL YET (only clic works and message not displayed)
	
	def byeThen(self, event):
		if event.keysym == "Return" or event.num == 1:
			end = "Passez une bonne journée!"
			self.display.config(state = Tkinter.NORMAL)
			self.display.insert(Tkinter.END, "\n"+ "Bye")
			self.display.config(state = Tkinter.DISABLED)
			time.sleep(2) 



#Binds keyboard/mouse actions to widgets
self.user_entry.bind("<Key>", speakToMe)
self.user_entry.focus_set()

self.send_button.bind("<Button-1>", speakToMe)
self.send_button.bind("<Key>", speakToMe)
self.send_button.focus_set()

self.quit_button.bind("<Button-1>", byeThen)
self.quit_button.bind("<Key>", byeThen)
self.quit_button.focus_set()

self.root.mainloop()












