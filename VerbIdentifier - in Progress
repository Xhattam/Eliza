# -*- coding: utf-8 -*-

import random

"""

@author: JTanon
@Created on the 12/06/2013

"""

class VerbIdentifier():
	
	def __init__(self, verb, obj):
		self.verb = verb
		self.obj = obj
		self.psychoVerbs = psychoVerbs

		#prévoie de pouvoir entrer Null pour l'objet, et gérer les cas d'absence d'objet

# def iSeeScaryStuff():
# 	if COD not in self.entry:
# 		return ("Qu'est-ce qui vous "+str(verb, form)+" ?") #add conjuguated verb
# 	elif COD not in humans: #list of human entities
# 		return ("Pourquoi êtes-vous "+str(verb, pp) +" par ceci ?") #add preterit of verb
# 	elif COD in humans:
# 		return ("Pourquoi cette personne vous "+str(verb, form)+"-t-elle ?") #add conjuguated verb
# 	else:
# 		randomAnswer() #random sentence if no situation is matched - Kira's function

def imStressedOut():	

	if COD in humans:
		iAmHuman = [("Pourquoi cette personne vous "+str(verb, form)+"-t-elle ?"), ("Qu'est-ce qui vous "+str(verb, form)+" chez cette personne?")]
		i = random.randint(0, len(iAmHuman) - 1) 
		return iAmHuman[i]
		
	elif COD not in humans:
		iAmNotHuman = [("Pourquoi ceci vous "+str(verb, form)+"-t-il autant ?"), ("Pourquoi êtes-vous si "+str(verb, pp)+" par ceci ?"), 
		("Pourriez-vous me dire pourquoi ceci vous "+str(verb, form)+ " tant ?"), ("Dites-moi pourquoi ceci vous "+str(verb, form)+" tant.")]
		i = random.randint(0, len(iAmNotHuman) - 1) 
		return iAmNotHuman[i]
		
	else:
		return randomAnswer()
	
	elif COD not in self.entry:
		dunnoWhatImStressedAbout = [("Qu'est-ce qui vous "+str(verb, form) +" tant?"), ("Qu'est-ce qui vous "+str(verb, form)+" ?"), 
		("Voulez-vous bien me dire ce qui vous "+str(verb, form)+" ?"), ("Dites-moi ce qui vous "+str(verb, form)+".")]
		i = random.randint(0, len(dunnoWhatImStressedAbout) - 1) 
		return dunnoWhatImStressedAbout[i]

	else:
		return randomAnswer()
 

#def howDoIReact():

#def iWasLike_Wow():

#def iLoveHateYou():
 #Working: now, I need to call a specifif function for each case
        


        #Working: now, I need to call a specifif function for each case
        def gotMyselfAPsychoVerb(verb):
            lst = psychoVerbs.keys()
            if verb in lst:
                if psychoVerbs[verb] == ['NeutralSurprise']:
                    print 'neutral'
                elif psychoVerbs[verb] == ['NegFear']:
                    print 'NegFear'
                elif psychoVerbs[verb] == ['PosSurprise']:
                    print 'PosSurprise'
                elif psychoVerbs[verb] == ['NegSad']:
                    print 'NegSad'
                elif psychoVerbs[verb] == ['PosSensitive']:
                    print 'PosSensitive'
                elif psychoVerbs[verb] == ['LoveHate']:
                    print 'LoveHate'
                else:
                    return oopsImStuck() #just being cautious, we shouldn't technically enter this 'else'
            else:
                oopsImStuck()


        #I need to test this - Jessica
        def oopsImStuck(self):
            hackneyedStuff = ["Dites m'en plus.", "Dites m'en d'avantage.", "Je vois, continuez.", "Je comprends, continuez.", "Continuez."]
            i = random.randint(0, len(lst)-1)
            print hackneyedStuff[i]




#These are dictionnaries for keywords and psychological verbs so far.
#I know they take some space, but using them could make a difference in execution time, and if we categorize them right, according to what type of words we're going to extract
#from the user input, they could turn out to be very useful! Tell me what you think on saturday?? :)




self.psychoVerbs = {'ébahir': ['NeutralSurprise'], 'surprendre': ['NeutralSurprise'], 'souffler': ['NeutralSurprise'], 'terroriser': ['NegFear'], 'éblouir': ['PosSurprise'], 
'renverser': ['NeutralSurprise'], 'asseoir': ['NeutralSurprise'], 'effrayer': ['NegFear'], 'attrister': ['NegSad'], 'haïr': ['LoveHate'], 'aimer': ['LoveHate'], 
'interdire': ['NeutralSurprise'], 'étonner': ['NeutralSurprise'], 'interloquer': ['NeutralSurprise'], 'épeurer': ['NegFear'], 'émotionner': ['PosSensitive'], 
'stupéfier': ['NeutralSurprise'], 'chiffonner': ['NegSad'], 'méduser': ['NeutralSurprise'], 'désoler': ['NegSad'], 'épater': ['NeutralSurprise'], 'détester': ['LoveHate'], 
'troubler': ['PosSensitive'], 'remuer': ['PosSensitive'], 'abasourdir': ['NeutralSurprise'], 'Affecter': ['PosSensitive'], 'effaroucher': ['NegFear'], 'intimider': ['NegFear'],
'peiner': ['NegSad'], 'ébaubir': ['NeutralSurprise'], 'saisir': ['NeutralSurprise'], 'estomaquer': ['NeutralSurprise'], 'ahurir': ['NeutralSurprise'], 'adorer': ['LoveHate'],
'terrifier': ['NegFear'], 'contrister': ['NegSad'], 'affoler': ['NegFear'], 'apeurer': ['NegFear'], 'alarmer': ['NegFear'], 'rembrunir': ['NegSad'], 
'chavirer': ['PosSensitive'], 'paniquer': ['NegFear'], 'affecter': ['NegSad'], 'toucher': ['PosSensitive'], 'chagriner': ['NegSad'], 'confondre': ['NeutralSurprise'], 
'tournebouler': ['PosSensitive'], 'atteindre': ['NegSad'], 'contrarier': ['NegSad'], 'affliger': ['NegSad'], 'époustoufler': ['NeutralSurprise'], 'glacer': ['NegFear'], 
'horrifier': ['NegFear'], 'frapper': ['NeutralSurprise'], 'scier': ['NeutralSurprise'], 'étourdir': ['PosSurprise'], 'bouleverser': ['PosSensitive'], 
'émouvoir': ['PosSensitive'], 'chambouler': ['PosSensitive'], 'inquiéter': ['NegFear'], 'émerveiller': ['PosSurprise'], 'épouvanter': ['NegFear'], 'angoisser': ['NegFear'], 
'assombrir': ['NegSad'], 'navrer': ['NegSad'], 'ébouriffer': ['NeutralSurprise'], 'sidérer': ['NeutralSurprise']}	
