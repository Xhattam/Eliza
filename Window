# -*- coding: utf-8 -*-

import Tkinter
import time
import random
import eliza

"""
@author: BAbemonty, MChassang, KKiranova, JTanon
"""

       
class window(object):
    """
    A window object - the interface used to talk to Eliza. 
    """
    def __init__(self, root):
        """
        creates a new window
        
        fields:
        self.eliza                -   eliza object imported
        self.root                 -   root parameter (acts as a pointer towards the window created in the main)  
        self.frameText            -   frame for the window
        self.scrollbar            -   the scrollbar
        self.main                 -   the label
        self.display              -   formatted text display
        self.user_entry           -   the entry of the user
        self.send_button          -   "Send" button  
        self.quit_button          -   "Quit" button
        self.entry                -   the text of the entry of the user
        """

        self.eliza = eliza()  
        self.root = root
        self.frameText = Tkinter.Frame(root) 
        
        self.scrollbar = Tkinter.Scrollbar(self.frameText)
        self.main = Tkinter.Label(text = "Eliza", borderwidth = 10, font = "Arial 14")
        self.display = Tkinter.Text(self.frameText, yscrollcommand=self.scrollbar.set)
        self.display.pack(side='left', fill='x')
        self.scrollbar.pack(side='right', fill='y')
        self.scrollbar.config(command=self.display.yview)
        
        self.main = Tkinter.Label(text = "Eliza", borderwidth = 10, font = "Arial 14")
        
        self.user_entry = Tkinter.Entry()
        self.send_button = Tkinter.Button(text = "Envoyer", command = self.speakToMe)
        self.quit_button = Tkinter.Button(text = "Quitter Eliza", command = self.root.quit) 
        
        self.user_entry.config(width = 70) 

        self.entry = ""
        
        #Placement of widgets
        self.main.grid(row = 0, columnspan = 2)
        self.frameText.grid(row = 1, columnspan  = 2)
        self.user_entry.grid(row = 2, columnspan = 2)
        self.send_button.grid(row = 3, column = 0)
        self.quit_button.grid(row = 3, column = 1)
        
        #Binding events to buttons/keys
        self.quit_button.bind("<Button-1>", self.byeThen)
        self.quit_button.focus_set()
        
        self.user_entry.bind("<Key>", self.speakToMe)
        self.user_entry.focus_set()
        
        self.send_button.bind("<Button-1>", self.speakToMe)
        self.send_button.bind("<Key>", self.speakToMe)
        self.send_button.focus_set()
        
        self.sayHelloEliza()


    def sayHelloEliza(self):
        """
        makes Eliza display a hello message when launched
        """
        self.display.config(state = Tkinter.NORMAL)
        self.display.insert("0.0", "Bonjour, je suis Eliza. Comment allez-vous ?")
        self.display.config(state = Tkinter.DISABLED)
        
    
    def speakToMe(self, event):
        """
        gets user input, adds input to stack. Displays user's entry in main window while deleting it from user_entry window.
        :param event: a Tkinter event
        """
        if event.keysym == "Return" or event.num == 1:
            self.display.config(state = Tkinter.NORMAL)
            self.entry = self.user_entry.get()
            self.display.insert(Tkinter.END, "\nVous: "+self.user_entry.get())
            self.user_entry.delete(0, len(self.user_entry.get()))
            self.send_button.config(state = Tkinter.DISABLED)
            self.user_entry.config(state = Tkinter.DISABLED)
            self.display.config(state = Tkinter.DISABLED)
            self.eliza.setInput(self.entry.lower())
            self.hereComesYourAnswer()

    
    def hereComesYourAnswer(self):
        """
        takes the final calculated answer from Eliza and displays it in Eliza's window
        """
        answer = self.eliza.getFinalAnswer()
        self.eliza.res_fields()
        self.display.config(state = Tkinter.NORMAL)
        self.display.insert(Tkinter.END, "\nEliza:"+ answer)
        self.display.config(state = Tkinter.DISABLED)
        self.send_button.config(state = Tkinter.NORMAL)
        self.user_entry.config (state = Tkinter.NORMAL)

    
    
    # byThen: NOT FULLY FUNCTIONNAL YET (only clic works and message not displayed)
    
    def byeThen(self, event):
        """
        if the user clicked on the quit button, prints a goodbye message and closes the window
        :param event: a Tkinter event
        """
        if event.keysym == "Return" or event.num == 1:
            self.display.config(state = Tkinter.NORMAL)
            self.display.insert(Tkinter.END, "\n"+ "Passez une bonne journée!")
            self.display.config(state = Tkinter.DISABLED)
            
    
    #counts up to 100 - then calls areYouStillHere to make Eliza talk

    def itsTheFinalCountdown(self):
    #Attention, prevoir une remise à zéro dés qu'on a une saisie clavier
        count = 0
        while count != 5:
            time.sleep(1)
            count += 1
            if count == 5:
                self.areYouStillHere()



    #Makes Eliza speak after 100 secs of inactivity from the user
    def areYouStillHere(self):
        lst = ["Ne voulez-vous pas m'en dire plus?" , "Etes-vous toujours là?" , "Si vous souhaitez de l'aide, il faut me parler!" , "Allons, dites-m'en encore un peu!"]
        i = random.randint(0, len(lst) - 1)
        self.display.config(state = Tkinter.NORMAL)
        self.display.insert(Tkinter.END, "\n"+ lst[i])
        self.display.config(state = Tkinter.DISABLED)
      









