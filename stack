# -*- coding: utf-8 -*-

class stack(object):
    
    
    """
    Create a stack object - Eliza's memory.
    """
    def __init__(self):
        """
        creates a stack object
        str-List self.tab - Eliza's memory
        str-List self.detPoss - list of possessive determinants
        """
        self.tab = []
        self.detPoss = {'ma':'votre', 'mon':'votre', 'un':'cet', 'une':'cette', 'des':'ces', 'nos':'vos', 'notre':'votre', 'mes': 'vos'}
        
        
    def isEmpty(self):
        """
        :returns: boolean (true if there are no elements in the stack)
        """
        return len(self.tab) == 0
        
        
    def push(self, t):
        """
        :param t: - tuple of strings (det+noun)
        """
        if len(t) > 1:
            t = (self.switchMe(t[0], self.detPoss), t[1])
            self.tab.append(t)
        
    def size(self):
        """
        :returns: number of elements in the stack (integer)
        """
        return len(self.tab)
        
        
    def reset(self):
        """
        deletes all the elements from the stack
        """
        self.tab = []
        
        
    def pop(self):
        """
        :returns: the last element added to the stack (a tuple of strings)
        deletes the last element of the stack
        """
        w = self.tab[-1]
        del self.tab[-1]
        return w
        
        
    def switchMe(self, p, dic):
        """
        :param p: a key (string)
        :param dic: a dictionary 
        :returns: if the key p is in the dictionary, returns the corresponding value, if not, returns the key p itself 
        """
        if p in dic:
            return dic[p]
        else:
            return p
        
        
    def peek(self):
        """
        :returns: the last element of the stack (a tuple of strings) 
        """
        return self.tab[-1]
                    
