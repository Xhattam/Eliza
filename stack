# -*- coding: utf-8 -*-

"""
@author: BAbemonty, MChassang, KKiranova, JTanon
"""

class stack(object):


	def __init__(self):
		"""
		@param str-List self.tab	- 	Eliza's memory
		@param str-List self.relative_lst 	- 	list of relative pronouns
		"""
		self.tab = []
		self.relative_lst = ['qui', 'que', 'quoi', 'dont', 'ou', 'qu\'', 'lequel', 'laquelle', 'lesquels', 'lesquelles', 'auquel']

	
	def isEmpty(self):
		"""
		@return boolean 
		"""
		return len(self.tab) == 0

	
	def push(self, t):
		"""
		@param str-Tuple t 	-	tuple det+noun
		"""
		if len(t) > 1:
			if t[0] not in self.relative_lst:
				self.tab.append(t)
			else:
				t = (self.switchMe(t[0]), t[1])
				self.tab.append(t)
		else:
			pass

	
	def size(self):
		"""
		@return Integer len(self.tab)
		"""
		return len(self.tab)

	
	def reset(self):
		self.tab = []

	
	def pop(self):
		"""
		@return str-Tuple w
		"""
		w = self.tab[len(self.tab)-1]
		return w

	
	def peek(self):
		"""
		@return str-Tuple self.tab[len(self.tab)-1]
		"""
		return self.tab[len(self.tab)-1]

